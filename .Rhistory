e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print(Y_ts_log)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print(Y_tr_log)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print(Y_ts_log)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print(cbind(Y_ts_lm, Y_ts_log))
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(cbind(Y_ts_lm, Y_ts_log))
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(cbind(Y_ts_lm, Y_tr_log))
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(cbind( Y_tr_log))
source('~/Desktop/STAT202A-HW7.R', echo=TRUE)
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(glm(Y_tr~X_tr, family = "binomial")))
set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(glm(Y_tr~X_tr, family = "binomial"))
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(glm(Y_tr~X_tr, family = "binomial"))
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(glm(Y_tr~X_tr, family = "binomial"))
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
print(glm(Y_tr~X_tr, family = "binomial"))
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
glm(Y_tr~X_tr, family = "binomial")
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
glm(Y_tr~X_tr, family = "binomial")
##set.seed(12345)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
glm(Y_tr~X_tr, family = "binomial")
set.seed(1234)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
glm(Y_tr~X_tr, family = "binomial")
set.seed(123)
dt = iris[sample(nrow(iris)),]
dt = iris[iris$Species != "setosa",]
dt$Species = ifelse(dt$Species == "virginica", 1, 0)
X = model.matrix(Species~., dt)[,-1]
Y = matrix(dt$Species)
X_tr = X[1:80, ]
X_ts = X[81:100, ]
Y_tr = Y[1:80, ]
Y_ts = Y[81:100, ]
Log = myLogistic(X_tr, Y_tr)$beta
LM = myLM(X_tr, Y_tr)
Y_tr_lm = LM$beta_ls[1] + X_tr %*% LM$beta_ls[2:ncol(dt)]
e_tr_lm = sqrt(sum((Y_tr-Y_tr_lm) ** 2)) / nrow(X_tr)
Y_ts_lm = LM$beta_ls[1] + X_ts %*% LM$beta_ls[2:ncol(dt)]
e_ts_lm = sqrt(sum((Y_ts-Y_ts_lm) ** 2)) / nrow(X_ts)
print("LM")
print(paste0("Training error: ", e_tr_lm))
print(paste0("Testing error: ", e_ts_lm))
print(LM$beta_ls)
Y_tr_log = X_tr %*% Log
e_tr_log = sqrt(sum((Y_tr-Y_tr_log) ** 2)) / nrow(X_tr)
Y_ts_log = X_ts %*% Log
e_ts_log = sqrt(sum((Y_ts-Y_ts_log) ** 2)) / nrow(X_ts)
print("Logit")
print(paste0("Training error: ", e_tr_log))
print(paste0("Testing error: ", e_ts_log))
print(Log)
glm(Y_tr~X_tr, family = "binomial")
install()
source('~/Desktop/LinearReg/R/myLogistic.R', echo=TRUE)
setwd("/Users/mies/Desktop/LinearReg")
library("devtools")
install()
source('~/Desktop/STAT202A-HW7.R', echo=TRUE)
install()
source('~/Desktop/STAT202A-HW7.R', echo=TRUE)
source('~/Desktop/STAT202A-HW7.R', echo=TRUE)
library(roxygen2)
document()
